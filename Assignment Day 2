Questions 1:
Create an empty list. Accept 10 numbers from the user and append to it the list if it is an even number.

# Create an empty list
sample_list = []
# Iterate over sequence of numbers from 0 to 9
for i in range(10):
    # Append each number at the end of list
    sample_list.append(i)

sample_list = [i for i in range(10)]

list.insert(index, item)

# Create an empty list
sample_list = []
# Iterate over sequence of numbers from 0 to 9
for i in range(10):
    # Insert each number at the end of list
    sample_list.insert(len(sample_list), i)
print('Sample List: ', sample_list)

Questions 2:
Create a notebook on LIST COMPREHENSION. This exercise is to put you in a Self learning mode

Answer:
What are List Comprehensions?
List comprehensions provide us with a simple way to create a list based on some iterable. During the creation, elements from the iterable can be conditionally included in the new list and transformed as needed.
An iterable is something you can loop over. If you want a more detailed explanation you can read my previous blog post.
The components of a list comprehension are:
Output Expression (Optional)
Iterable
Iterator variable which represents the members of the iterable

Example
numbers = [1, 2, 3, 4, 5]
squares = [number**2 for number in numbers]
print(squares)

Output:
[1, 4, 9, 16, 25]

Questions 3:
You have seen in the videos how powerful dictionary data structure is.
In this assignment, given a number n, you have to write a program that generates a dictionary d which
contains (i, i*i), where i is from 1 to n (both included).
Then you have to just print this dictionary d.
Example:
Input: 4
will give output as
{1: 1, 2: 4, 3: 9, 4: 16}
Input Format:
Take the number n in a single line.
Output Format:
Print the dictionary d in a single line.

Example:
Input:
8
Output:
{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}

Answer:
n=int(input("Input a number "))
d = dict()

for x in range(1,n+1):
    d[x]=x*x

print(d) 

Sample Output:

10                                                                                                            
{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}  

Questions 4:
There is a robot which wants to go the charging point to charge itself.
The robot moves in a 2-D plane from the original point (0,0). The robot can
move toward UP, DOWN, LEFT and RIGHT with given steps.
The trace of robot movement is shown as the following:
UP 5
DOWN 3
LEFT 3
RIGHT 2
Then, the output of the program should be:
2
The numbers after the direction are steps.
Write a program to compute the distance between the current position after
a sequence of movement and original point. If the distance is a float, then
just print the nearest integer (use round() function for that and then convert
it into an integer).
Input Format:
The first line of the input contains a number n which implies the number of
directions to be given.
The next n lines contain the direction and the step separated by a space.
Output Format:
Print the distance from the original position to the current position.
Example:
Input:
4
UP 5
DOWN 3
LEFT 3
RIGHT 2
Output:
2

Answer:
import math

x, y = 0, 0

while True:
    step = input("Type in UP/DOWN/LEFT/RIGHT #step number: ")

    if step == "":
        break

    else:
        step = step.split(" ")

        if step[0] == "UP":
            y = y + int(step[1])
        elif step[0] == "DOWN":
            y = y - int(step[1])
        elif step[0] == "LEFT":
            x = x - int(step[1])
        elif step[0] == "RIGHT":
            x = x + int(step[1])

c = math.sqrt(x**2 + y**2)

print("Distance:", c)
